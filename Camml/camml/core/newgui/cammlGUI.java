package camml.core.newgui;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Random;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;


/**Main class for GUI.
 * Most GUI-related code is in this class.
 * Most CaMML-related code is in the GUIModel class.
 * Also see: GUIAvailableParameters for some options.
 * Start GUI via the RunGUI class.
 * 
 * Note: GUI created with NetBeans IDE (using Java's Swing GUI libraries); much
 * 	of the code (especially in initComponents()) is generated by NetBeans
 * @author Alex Black
 */
public class cammlGUI extends javax.swing.JFrame {

	private GUIModel guimodel;
	
    /**
     * Creates new form cammlGUI
     */
    public cammlGUI( GUIModel model ) {
    	
    	this.guimodel = model;
    	
        //Set look and feel:
    	try {
            // Set System L&F
	        UIManager.setLookAndFeel(
	            UIManager.getSystemLookAndFeelClassName());
	    } 
	    catch (UnsupportedLookAndFeelException e) {
	       // handle exception
	    }
	    catch (ClassNotFoundException e) {
	       // handle exception
	    }
	    catch (InstantiationException e) {
	       // handle exception
	    }
	    catch (IllegalAccessException e) {
	       // handle exception
	    }
        
    	//Initialise Swing GUI Components:
        initComponents();
        
        //Redirect console output to GUI text area:
        redirectOutputStream( runConsoleOutputTextArea );
        
        //Expert priors disabled by default:
        setExpertPriorsTabEnabled( false );
        
        //Populate the options available to the user in setup tab: (from options in GUIAvaliableParameters)
        populateSetupOptions();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * Most of this code is auto-generated by NetBeans
     */
    private void initComponents() {

    	//--------- Start NetBeans Autogenerated Code ---------
    	
    	mainTabbedPane = new javax.swing.JTabbedPane();
        setupPanel = new javax.swing.JPanel();
        jLabelDataFileLabel = new javax.swing.JLabel();
        filePathTextField = new javax.swing.JTextField();
        viewDataBtn = new javax.swing.JButton();
        loadDataFileBtn = new javax.swing.JButton();
        searchParametersScrollPane = new javax.swing.JScrollPane();
        searchParametersPanel = new javax.swing.JPanel();
        setupLabelMMLLearner = new javax.swing.JLabel();
        MMLLearnerCombo = new javax.swing.JComboBox();
        setupLabelSearchFactor = new javax.swing.JLabel();
        searchFactorTextfield = new javax.swing.JTextField();
        setupLabelMinTotalPosterior = new javax.swing.JLabel();
        setupLabelMaxSECs = new javax.swing.JLabel();
        maxSECsTextfield = new javax.swing.JTextField();
        setupLabelParameterizationSettings = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        setupLabelSearchSettings = new javax.swing.JLabel();
        minTotalPosteriorTextField = new javax.swing.JTextField();
        setupLabelRNG = new javax.swing.JLabel();
        setupRNGCombo = new javax.swing.JComboBox();
        setupLabelRNGSeed = new javax.swing.JLabel();
        setupRNGSeed = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        setupLabelAdvancedSettings = new javax.swing.JLabel();
        setupLabelGenerateFullResults = new javax.swing.JLabel();
        setupGenerateFullResultsCheckbox = new javax.swing.JCheckBox();
        setupRNGSeed2 = new javax.swing.JTextField();
        priorsPanel = new javax.swing.JPanel();
        useExpertPriorsCheckbox = new javax.swing.JCheckBox();
        saveExpertPriorsBtn = new javax.swing.JButton();
        loadExpertPriorsBtn = new javax.swing.JButton();
        newExpertPriorsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        expertPriorsTextArea = new javax.swing.JTextArea();
        validateExpertPriorsBtn = new javax.swing.JButton();
        helpExpertPriorsBtn = new javax.swing.JButton();
        runPanel = new javax.swing.JPanel();
        runCammlRunBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        runConsoleOutputTextArea = new javax.swing.JTextArea();
        runLabelConsoleOutput = new javax.swing.JLabel();
        runClearOutputBtn = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        resultsLabelBestModel = new javax.swing.JLabel();
        exportNeticaBNBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        resultsLabelFullResults = new javax.swing.JLabel();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsGenerateFullResultsBtn = new javax.swing.JButton();
        resultsExportFullResults = new javax.swing.JButton();
        resultsViewNetworkBtn = new javax.swing.JButton();
        resultsViewSelectedNetworkBtn = new javax.swing.JButton();
        statusBarLabelData = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        statusBarLabelExpertPriors = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CaMML");
        setMinimumSize(new java.awt.Dimension(640, 320));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelDataFileLabel.setText("Data File:");

        filePathTextField.setEditable(false);

        viewDataBtn.setLabel("View");
        viewDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDataBtnActionPerformed(evt);
            }
        });

        loadDataFileBtn.setText("Load");
        loadDataFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataFileBtnActionPerformed(evt);
            }
        });

        searchParametersScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Parameters"));
        searchParametersScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        setupLabelMMLLearner.setText("Parameterization Type");

        MMLLearnerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MMLLearnerComboActionPerformed(evt);
            }
        });

        setupLabelSearchFactor.setText("Search Factor");

        searchFactorTextfield.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        searchFactorTextfield.setText("1.0");
        searchFactorTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFactorTextfieldFocusLost(evt);
            }
        });

        setupLabelMinTotalPosterior.setText("Minimum Total Posterior");

        setupLabelMaxSECs.setText("Maximum Number of SECs");

        maxSECsTextfield.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maxSECsTextfield.setText("30");
        maxSECsTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxSECsTextfieldFocusLost(evt);
            }
        });

        setupLabelParameterizationSettings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        setupLabelParameterizationSettings.setText("Bayesian Network Parameterization Settings");

        setupLabelSearchSettings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        setupLabelSearchSettings.setText("Metropolis Algorithm Search Settings");

        minTotalPosteriorTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minTotalPosteriorTextField.setText("0.999");
        minTotalPosteriorTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minTotalPosteriorTextFieldFocusLost(evt);
            }
        });

        setupLabelRNG.setText("Random Number Generator");

        setupRNGCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupRNGComboActionPerformed(evt);
            }
        });

        setupLabelRNGSeed.setText("Random Number Generator Seed/s");

        setupRNGSeed.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        setupRNGSeed.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                setupRNGSeedFocusLost(evt);
            }
        });

        setupLabelAdvancedSettings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        setupLabelAdvancedSettings.setText("Advanced Settings");

        setupLabelGenerateFullResults.setText("Generate Full Results");

        setupGenerateFullResultsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupGenerateFullResultsCheckboxActionPerformed(evt);
            }
        });

        setupRNGSeed2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                setupRNGSeed2FocusLost(evt);
            }
        });

        javax.swing.GroupLayout searchParametersPanelLayout = new javax.swing.GroupLayout(searchParametersPanel);
        searchParametersPanel.setLayout(searchParametersPanelLayout);
        searchParametersPanelLayout.setHorizontalGroup(
            searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(searchParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchParametersPanelLayout.createSequentialGroup()
                        .addComponent(setupLabelParameterizationSettings)
                        .addContainerGap())
                    .addGroup(searchParametersPanelLayout.createSequentialGroup()
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(setupLabelMMLLearner, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setupLabelSearchSettings)
                            .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(setupLabelRNG, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(setupLabelRNGSeed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                .addComponent(setupLabelSearchFactor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(setupLabelMaxSECs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(setupLabelMinTotalPosterior, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(setupLabelAdvancedSettings)
                            .addComponent(setupLabelGenerateFullResults, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchParametersPanelLayout.createSequentialGroup()
                                .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(setupGenerateFullResultsCheckbox)
                                    .addComponent(maxSECsTextfield)
                                    .addComponent(searchFactorTextfield)
                                    .addComponent(minTotalPosteriorTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(searchParametersPanelLayout.createSequentialGroup()
                                .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, searchParametersPanelLayout.createSequentialGroup()
                                        .addComponent(setupRNGSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(setupRNGSeed2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(setupRNGCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MMLLearnerCombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(45, Short.MAX_VALUE))))))
            .addComponent(jSeparator4)
        );
        searchParametersPanelLayout.setVerticalGroup(
            searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchParametersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setupLabelParameterizationSettings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setupLabelMMLLearner)
                    .addComponent(MMLLearnerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchParametersPanelLayout.createSequentialGroup()
                        .addComponent(setupLabelSearchSettings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setupLabelRNG)
                            .addComponent(setupRNGCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setupLabelRNGSeed)
                            .addComponent(setupRNGSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setupRNGSeed2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setupLabelSearchFactor)
                            .addComponent(searchFactorTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setupLabelMaxSECs)
                            .addComponent(maxSECsTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(setupLabelMinTotalPosterior)
                            .addComponent(minTotalPosteriorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setupLabelAdvancedSettings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setupLabelGenerateFullResults))
                    .addComponent(setupGenerateFullResultsCheckbox))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        searchParametersScrollPane.setViewportView(searchParametersPanel);

        javax.swing.GroupLayout setupPanelLayout = new javax.swing.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchParametersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addComponent(jLabelDataFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePathTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadDataFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewDataBtn)))
                .addContainerGap())
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDataFileLabel)
                    .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewDataBtn)
                    .addComponent(loadDataFileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchParametersScrollPane))
        );

        mainTabbedPane.addTab("Setup", setupPanel);

        useExpertPriorsCheckbox.setText("Use Expert Priors");
        useExpertPriorsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useExpertPriorsCheckboxActionPerformed(evt);
            }
        });

        saveExpertPriorsBtn.setText("Save");
        saveExpertPriorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExpertPriorsBtnActionPerformed(evt);
            }
        });

        loadExpertPriorsBtn.setText("Load");
        loadExpertPriorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExpertPriorsBtnActionPerformed(evt);
            }
        });

        newExpertPriorsBtn.setText("New");
        newExpertPriorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newExpertPriorsBtnActionPerformed(evt);
            }
        });

        expertPriorsTextArea.setColumns(20);
        expertPriorsTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        expertPriorsTextArea.setRows(5);
        expertPriorsTextArea.setEnabled(false);
        expertPriorsTextArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                expertPriorsTextAreaFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(expertPriorsTextArea);

        validateExpertPriorsBtn.setText("Validate");
        validateExpertPriorsBtn.setEnabled(false);
        validateExpertPriorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateExpertPriorsBtnActionPerformed(evt);
            }
        });

        helpExpertPriorsBtn.setText("Help");
        helpExpertPriorsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpExpertPriorsBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout priorsPanelLayout = new javax.swing.GroupLayout(priorsPanel);
        priorsPanel.setLayout(priorsPanelLayout);
        priorsPanelLayout.setHorizontalGroup(
            priorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priorsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(priorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(priorsPanelLayout.createSequentialGroup()
                        .addComponent(useExpertPriorsCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 329, Short.MAX_VALUE)
                        .addComponent(newExpertPriorsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadExpertPriorsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveExpertPriorsBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, priorsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(helpExpertPriorsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(validateExpertPriorsBtn)))
                .addContainerGap())
        );
        priorsPanelLayout.setVerticalGroup(
            priorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priorsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(priorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(useExpertPriorsCheckbox)
                    .addComponent(saveExpertPriorsBtn)
                    .addComponent(loadExpertPriorsBtn)
                    .addComponent(newExpertPriorsBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(priorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validateExpertPriorsBtn)
                    .addComponent(helpExpertPriorsBtn)))
        );

        mainTabbedPane.addTab("Expert Priors", priorsPanel);

        runCammlRunBtn.setText("Run CaMML");
        runCammlRunBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCammlRunBtnActionPerformed(evt);
            }
        });

        runConsoleOutputTextArea.setColumns(20);
        runConsoleOutputTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        runConsoleOutputTextArea.setRows(5);
        jScrollPane2.setViewportView(runConsoleOutputTextArea);

        runLabelConsoleOutput.setText("Console Output:");

        runClearOutputBtn.setText("Clear Output");
        runClearOutputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runClearOutputBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout runPanelLayout = new javax.swing.GroupLayout(runPanel);
        runPanel.setLayout(runPanelLayout);
        runPanelLayout.setHorizontalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(runPanelLayout.createSequentialGroup()
                        .addComponent(runLabelConsoleOutput)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(runPanelLayout.createSequentialGroup()
                        .addComponent(runCammlRunBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(runClearOutputBtn)))
                .addContainerGap())
        );
        runPanelLayout.setVerticalGroup(
            runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(runPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runCammlRunBtn)
                    .addComponent(runClearOutputBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runLabelConsoleOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Run", runPanel);

        resultsLabelBestModel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resultsLabelBestModel.setText("Best Network");

        exportNeticaBNBtn.setText("Export Netica BN");
        exportNeticaBNBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportNeticaBNBtnActionPerformed(evt);
            }
        });

        resultsLabelFullResults.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        resultsLabelFullResults.setText("Full Results");

        resultsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Full Results"));

        resultsGenerateFullResultsBtn.setText("Generate Full Results");
        resultsGenerateFullResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsGenerateFullResultsBtnActionPerformed(evt);
            }
        });

        resultsExportFullResults.setText("Export All");
        resultsExportFullResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsExportFullResultsActionPerformed(evt);
            }
        });

        resultsViewNetworkBtn.setText("View Network");
        resultsViewNetworkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsViewNetworkBtnActionPerformed(evt);
            }
        });

        resultsViewSelectedNetworkBtn.setText("View Selected Network");
        resultsViewSelectedNetworkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsViewSelectedNetworkBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
        resultsPanel.setLayout(resultsPanelLayout);
        resultsPanelLayout.setHorizontalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultsScrollPane)
                    .addGroup(resultsPanelLayout.createSequentialGroup()
                        .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultsLabelBestModel)
                            .addComponent(resultsLabelFullResults))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(resultsPanelLayout.createSequentialGroup()
                        .addComponent(resultsGenerateFullResultsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultsViewSelectedNetworkBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                        .addComponent(resultsExportFullResults))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
                        .addComponent(resultsViewNetworkBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportNeticaBNBtn)))
                .addContainerGap())
        );
        resultsPanelLayout.setVerticalGroup(
            resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultsLabelBestModel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportNeticaBNBtn)
                    .addComponent(resultsViewNetworkBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsLabelFullResults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultsGenerateFullResultsBtn)
                    .addComponent(resultsExportFullResults)
                    .addComponent(resultsViewSelectedNetworkBtn))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Results", resultsPanel);

        statusBarLabelData.setText("Data: Not Loaded");

        versionLabel.setText("CaMML (C) - Ver. 0.00");

        statusBarLabelExpertPriors.setText("Expert Priors: Not Set");

        fileMenu.setText("File");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(helpMenuItem);
        helpMenu.add(jSeparator2);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusBarLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusBarLabelExpertPriors, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158)
                .addComponent(versionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainTabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusBarLabelData)
                    .addComponent(versionLabel)
                    .addComponent(statusBarLabelExpertPriors)))
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName("Setup");
        
        
        
        //------------ End NetBeans Generated Code ------------
        //***************************************************
        dataFileChooser = new JFileChooser();
        dataFileChooser.setFileFilter(  new FileNameExtensionFilter("Old CaMML Format (.cas)", "cas") );
        dataFileChooser.addChoosableFileFilter( new FileNameExtensionFilter("Friedman Data Files (.data)","data") );	//TODO: Currently untested!
        dataFileChooser.addChoosableFileFilter( new FileNameExtensionFilter("Weka Data Files (.arff)","arff") );
        
        outputBNetChooser = new JFileChooser();
        outputBNetChooser.setFileFilter( new FileNameExtensionFilter("Netica BN (.dne)","dne"));
        
        expertPriorsFileChooser = new JFileChooser();
        expertPriorsFileChooser.setFileFilter( new FileNameExtensionFilter("Text file (.txt)","txt") );

        pack();
    }

    
    
    
    
    //***********************************************************
    /*----------------- Menu and Misc. Actions: ---------------*/
    //***********************************************************
    //User clicked on File -> Exit menu
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
    	confirmBeforeExit();
    }
    
    //User clicked 'X' on main window
    private void formWindowClosing(java.awt.event.WindowEvent evt) {
    	confirmBeforeExit();
    }
    
    private void confirmBeforeExit(){
    	int result = JOptionPane.showConfirmDialog(mainTabbedPane, "Are you sure you want to exit? Any unsaved data will be lost.", "Exit CaMML?", JOptionPane.OK_CANCEL_OPTION);
    	if( result == JOptionPane.OK_OPTION ) System.exit(0);
    }
   
    //User clicked on Help -> Help
    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	JOptionPane.showMessageDialog( mainTabbedPane, "Not implemented.");
    }

    //User clicked on Help -> About
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	JOptionPane.showMessageDialog( mainTabbedPane, "Not implemented.");
    }
    
    
    
    
    
    
    
    //***********************************************************
    /*------------------- Setup Tab Actions: ------------------*/
    //***********************************************************
    
    //User clicked on 'Load' (i.e. load data) in Setup tab
    private void loadDataFileBtnActionPerformed(java.awt.event.ActionEvent evt) {
        
    	//Set directory:
    	if( guimodel.selectedFile == null ){
    		dataFileChooser.setCurrentDirectory( new File(".") );
    	} else{
    		dataFileChooser.setCurrentDirectory( guimodel.selectedFile );
    	}
    	
    	//Get the user to open a file, and get the result:
    	int result = dataFileChooser.showOpenDialog(this);
    	
    	if( result == JFileChooser.APPROVE_OPTION ){
    		guimodel.selectedFile = dataFileChooser.getSelectedFile();
    		try{
    			guimodel.loadDataFile( dataFileChooser.getSelectedFile() );
    			filePathTextField.setText( dataFileChooser.getSelectedFile().getAbsolutePath() );
    		} catch( Exception e ){
    			JOptionPane.showMessageDialog(mainTabbedPane, "Error loading data\n" + e.getMessage() );
    			filePathTextField.setText( "" );
    			updateStatusBarLabelData();
    			return;
    		}
    	}
    	
    	//Check if data is continuous...
    	//TODO: Update this once continuous data import is handled.
    	if( !guimodel.checkDataNotContinuous() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Dataset contains continuous variables. Handling of continuous datasets not yet implemented." );
    		guimodel.data = null;
    		filePathTextField.setText("");
    	}
    	updateStatusBarLabelData();
    }
    
    //User clicked on 'View' (i.e. view data) in Setup tab
    private void viewDataBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	createDataViewer();
    }
    
    /*User selects a different option (i.e. CPT, DTree, etc) from the MMLLearner
     * combo box.
     * Method updates selected learner in guimodel.
     */
    private void MMLLearnerComboActionPerformed(java.awt.event.ActionEvent evt) {
    	int idx = MMLLearnerCombo.getSelectedIndex();
    	guimodel.MMLLearner = GUIModel.MMLLearners[idx];
    }
    
    //User leaves Search Factor text field: Validate input in search factor:
    private void searchFactorTextfieldFocusLost(java.awt.event.FocusEvent evt) {
    	String s = searchFactorTextfield.getText();
    	if( validateNumericInputStringDouble( s, 0.1, 20.0 ) ){
    		searchFactorTextfield.setBackground( Color.WHITE );		//Valid input
    		guimodel.searchFactor = Double.parseDouble(s);
    	} else{
    		searchFactorTextfield.setBackground( Color.RED );		//invalid input
    		guimodel.searchFactor = Double.NaN;
    	}
    }

    //User leaves maxSECs text field: Validate input
    private void maxSECsTextfieldFocusLost(java.awt.event.FocusEvent evt) {
        String s = maxSECsTextfield.getText();
    	if( validateNumericInputStringInteger( s, 3, Integer.MAX_VALUE ) ){
    		maxSECsTextfield.setBackground( Color.WHITE );		//Valid input
    		guimodel.maxSECs = Integer.parseInt(s);
    	} else{
    		maxSECsTextfield.setBackground( Color.RED );		//invalid input
    		guimodel.maxSECs = Integer.MIN_VALUE;
    	}
    }

    //User leaves Minimum Total Posterior text field: Validate input
    private void minTotalPosteriorTextFieldFocusLost(java.awt.event.FocusEvent evt) {
    	String s = minTotalPosteriorTextField.getText();
    	if( validateNumericInputStringDouble( s, 0.3, 1.0 ) ){
    		minTotalPosteriorTextField.setBackground( Color.WHITE );		//Valid input
    		guimodel.minTotalPosterior = Double.parseDouble(s);
    	} else{
    		minTotalPosteriorTextField.setBackground( Color.RED );		//invalid input
    		guimodel.minTotalPosterior = Double.NaN;
    	}
    }
    
    //User checks/unchecks "Generate Full Results" checxbox in Setup tab
    private void setupGenerateFullResultsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {
        guimodel.fullResults = setupGenerateFullResultsCheckbox.isSelected();
    }
    
    //User selects a different option in the RNG combo box (in setup tab)
    private void setupRNGComboActionPerformed(java.awt.event.ActionEvent evt) {
    	int idx = setupRNGCombo.getSelectedIndex();
        guimodel.r = GUIAvailableParameters.RNGs[ idx ];
        guimodel.useSetSeed = GUIAvailableParameters.RNGUseSetSeed[ idx ];
        guimodel.useSetSeed2 = GUIAvailableParameters.RNGUseSetSeed2[ idx ];
        setupRNGSeed.setEnabled( GUIAvailableParameters.RNGUseSetSeed[ idx ] );
        setupRNGSeed2.setEnabled( GUIAvailableParameters.RNGUseSetSeed2[ idx ] );
        
        if( !guimodel.useSetSeed ){
        	setupRNGSeed.setBackground( searchParametersPanel.getBackground() );
        } else{
        	setupRNGSeed.setText( Long.toString( guimodel.randomSeed ) );
        }
        
        if( !guimodel.useSetSeed2 ){
        	setupRNGSeed2.setBackground( searchParametersPanel.getBackground() );
        } else{
        	setupRNGSeed2.setText( Long.toString( guimodel.randomSeed2 ) );
        }
    }
    
    //User exits RNG seed textbox: Validate input
    private void setupRNGSeedFocusLost(java.awt.event.FocusEvent evt) {
    	if( guimodel.useSetSeed == false ){
    		//setupRNGSeed.setBackground( Color.WHITE );
    		return;
    	}
        String s = setupRNGSeed.getText();
        
        if( validateNumericInputStringInteger( s, Integer.MIN_VALUE, Integer.MAX_VALUE ) ){
    		setupRNGSeed.setBackground( Color.WHITE );		//Valid input
    		guimodel.randomSeed = Integer.parseInt(s);
    	} else{
    		setupRNGSeed.setBackground( Color.RED );		//invalid input
    		guimodel.randomSeed = new Random().nextInt();
    	}
    	
    }

    //User exits RNG seed2 textbox: Validate input
    private void setupRNGSeed2FocusLost(java.awt.event.FocusEvent evt) {
    	if( guimodel.useSetSeed2 == false ){
    		//setupRNGSeed.setBackground( Color.WHITE );
    		return;
    	}
        String s = setupRNGSeed2.getText();
        
        if( validateNumericInputStringLong( s, Integer.MIN_VALUE, Integer.MAX_VALUE ) ){
    		setupRNGSeed2.setBackground( Color.WHITE );		//Valid input
    		guimodel.randomSeed2 = Integer.parseInt(s);
    	} else{
    		setupRNGSeed2.setBackground( Color.RED );		//invalid input
    		guimodel.randomSeed2 = new Random().nextInt();
    	}
    }
    
    
    
    
    
    
    //***********************************************************
    /*----------------- Expert Priors Tab Actions: --------------*/
    //***********************************************************
    
    //User checks/unchecks "Use Expert Priors" checkbox in Expert Priors tab
    private void useExpertPriorsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {
    	if( useExpertPriorsCheckbox.isSelected() ){
    		setExpertPriorsTabEnabled( true );
    		guimodel.useExpertPriors = true;
    	} else{
    		setExpertPriorsTabEnabled( false );
    		guimodel.useExpertPriors = false;
    	}
    	updateStatusBarLabelExpertPriors();
    }
    
    //User clicks "New" button in Expert Priors Tab
    private void newExpertPriorsBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog( mainTabbedPane, "Not implemented.");
    	expertPriorsTextArea.setText( GUIModel.defaultNewExpertPriorString );
    }                                                  

    //User clicks the "Load" button in the expert priors tab
    private void loadExpertPriorsBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	//Set directory:
    	if( guimodel.selectedFile == null ){
    		dataFileChooser.setCurrentDirectory( new File(".") );
    	} else{
    		dataFileChooser.setCurrentDirectory( guimodel.selectedFile );
    	}
    	
    	int result = expertPriorsFileChooser.showOpenDialog(mainTabbedPane);
    	
    	if( result == JFileChooser.APPROVE_OPTION ){
    		String path = expertPriorsFileChooser.getSelectedFile().getAbsolutePath();
    		
    		BufferedReader inputReader;
    		try{
    			inputReader = new BufferedReader( new FileReader( path ));
    			
    			String fileContents = "";
    			String line;
    			
    			while( (line=inputReader.readLine()) != null ){
    				fileContents += line + "\n";
    			}
    			inputReader.close();
    			
    			expertPriorsTextArea.setText( fileContents );
    			
    		} catch( Exception e ){
    			JOptionPane.showMessageDialog(mainTabbedPane, "Error loading expert prior data - " + e.getMessage() );
    		}
    	}
    }

    //User clicks the "Save" button in the expert priors tab
    private void saveExpertPriorsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	//JOptionPane.showMessageDialog( mainTabbedPane, "Not implemented.");
    	
    	int result = expertPriorsFileChooser.showSaveDialog(mainTabbedPane);
    	
    	if( result == JFileChooser.APPROVE_OPTION ){
    		String path = expertPriorsFileChooser.getSelectedFile().getAbsolutePath();
    		
    		BufferedWriter outputWriter;
    		try{
    			outputWriter = new BufferedWriter( new FileWriter( path ));
    			
    			String toWrite = expertPriorsTextArea.getText();
    			
    			outputWriter.write( toWrite );
    			
    			outputWriter.flush();
    			outputWriter.close();
    			
    		} catch( Exception e ){
    			JOptionPane.showMessageDialog(mainTabbedPane, "Error saving expert prior data - " + e.getMessage() );
    		}
    	}
    	
    }

    //User clicks "Help" button in expert priors tab
    private void helpExpertPriorsBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	JOptionPane.showMessageDialog( mainTabbedPane, "Not implemented.");
    }
    
    //User presses "Validate" (i.e. validate expert priors text) in Expert Priors tab
    private void validateExpertPriorsBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	if( !guimodel.dataValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Data file not selected. Cannot validate expert priors without data file.",
    				"Error",JOptionPane.ERROR_MESSAGE);
    		updateStatusBarLabelExpertPriors();
    		return;
    	}
    	
    	boolean valid = false;
    	try{
    		valid = guimodel.validateExpertPriors( expertPriorsTextArea.getText() );
    	} catch( Exception e ){
    		updateStatusBarLabelExpertPriors();
    		String exceptionMsg = e.getMessage();
    		
    		//Remove unwanted stack trace text from the exception message... Inelegant, but it works.
    		String removeText = "Exception:";
    		int idx = exceptionMsg.lastIndexOf( removeText );
    		exceptionMsg = exceptionMsg.substring(idx + removeText.length() + 1 );
    		
    		updateStatusBarLabelExpertPriors();
    		JOptionPane.showMessageDialog( mainTabbedPane, "Expert Priors: Invalid\n" + exceptionMsg );	
    	}
    	if( valid ){
    		guimodel.expertPriorsString = expertPriorsTextArea.getText();
    		updateStatusBarLabelExpertPriors();
    		JOptionPane.showMessageDialog( mainTabbedPane, "Expert Priors: OK");
    	} else{
    		
    	}
    }
    
    //Expert priors text area loses focus
    private void expertPriorsTextAreaFocusLost(java.awt.event.FocusEvent evt) {
        updateStatusBarLabelExpertPriors();
    }
    
    
    
    
    
    //***********************************************************
    /*------------------- Run Tab Actions: --------------------*/
    //***********************************************************

    //User clicks the "Run" (i.e. run search) button in the Run tab
    private void runCammlRunBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	//First: Get/check most recent version of Expert Priors:
    	if( guimodel.useExpertPriors ){
    		try{
    			guimodel.validateExpertPriors( expertPriorsTextArea.getText() );
    			guimodel.expertPriorsString = expertPriorsTextArea.getText();
    		} catch( Exception e ){
    			guimodel.expertPriorsString = null;
    		}
    	}


    	if( checkSearchSettingsAndDisplayErrors() ){
    		guimodel.runSearch();
    	} else {
    		return;
    	}
    	
    	if( guimodel.fullResults ){
    		updateFullResultsDisplay();
    	} else {
    		resultsScrollPane.setViewportView( null );
    	}
    }
    
    //User clicks "Clear" button in Run tab
    private void runClearOutputBtnActionPerformed(java.awt.event.ActionEvent evt) {
        runConsoleOutputTextArea.setText( "" );
    }
    
    
    
    
    
    
    
    //***********************************************************
    /*----------------- Results Tab Actions --------------------*/
    //***********************************************************
    
    //User clicks "Generate Full Results" in Results tab
    private void resultsGenerateFullResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	updateFullResultsDisplay();
    }
    
    //Helper method: Create/update the table with the full results in Results tab
    private void updateFullResultsDisplay(){
    	if( guimodel.searchResults == null ){
    		if( !guimodel.generateFullResults() ){
    			if( guimodel.metropolisSearch == null || !guimodel.metropolisSearch.isFinished() ){
    				JOptionPane.showMessageDialog( mainTabbedPane, "Cannot generate results: search not complete.");
    				return;
    			} else {
    				JOptionPane.showMessageDialog( mainTabbedPane, "Cannot generate results.");
    				return;
    			}
    		}
    	}
    	fullResultsTable = new JTable( new FullResultsTableModel( guimodel.searchResults) );
    	resultsScrollPane.setViewportView( fullResultsTable );
    }
    
    //User clicks "View Network": View the network for the best TOM generated during search
    private void resultsViewNetworkBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if( guimodel.metropolisSearch == null || !guimodel.metropolisSearch.isFinished() ){
        	JOptionPane.showMessageDialog( mainTabbedPane, "Cannot display network: Search not run.");
        	return;
        }
        
        try{
        	new BNetViewer( guimodel.generateBestNeticaNetworkString(), false );
        } catch( Exception e ){
        	JOptionPane.showMessageDialog( mainTabbedPane, e );
        }
    }

    //User clicks "Export Netica BN": Export the best network found during search to Netica format
    private void exportNeticaBNBtnActionPerformed(java.awt.event.ActionEvent evt) {
    	if( guimodel.metropolisSearch == null || !guimodel.metropolisSearch.isFinished() ){
        	JOptionPane.showMessageDialog( mainTabbedPane, "Cannot display network: Search not run.");
        	return;
        }
    	
        //Set path to current working path, or last directory...
    	if( guimodel.lastExportedBNet == null ){
    		outputBNetChooser.setCurrentDirectory( new File(".") );
    	} else{
    		outputBNetChooser.setCurrentDirectory( guimodel.lastExportedBNet );
    	}
    	
    	//Output:
    	int result = outputBNetChooser.showSaveDialog( this );
        
    	if( result == JFileChooser.APPROVE_OPTION ){
    		guimodel.lastExportedBNet = outputBNetChooser.getSelectedFile();
    		
    		//Temporary:
    		String outputPath = outputBNetChooser.getSelectedFile().getAbsolutePath();
    		if( !outputPath.endsWith(".dne") ){
    			outputPath += ".dne";
    		}
    		try{
    			guimodel.outputNeticaBN( outputPath );
    		} catch( Exception e ){
    			JOptionPane.showMessageDialog( mainTabbedPane, "Error exporting network.");
    		}
    	}
    }
    
    //User clicks "Export All" button: Export all networks to a specified location
    private void resultsExportFullResultsActionPerformed(java.awt.event.ActionEvent evt) {
    	//Check if full results have actually been generated yet:
    	if( guimodel.metropolisSearch == null || !guimodel.metropolisSearch.isFinished() ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Cannot Export Networks: Search not complete.");
    		return;
    	}
    	if( guimodel.searchResults == null || fullResultsTable == null ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Cannot Export Networks: Full results not generated.");
    		return;
    	}
    	
    	
    	//Set path to current working path, or last directory...
    	if( guimodel.lastExportedBNet == null ){
    		outputBNetChooser.setCurrentDirectory( new File(".") );
    	} else{
    		outputBNetChooser.setCurrentDirectory( guimodel.lastExportedBNet );
    	}
    	
    	//Get output location:
    	int result = outputBNetChooser.showSaveDialog( this );
        
    	if( result == JFileChooser.APPROVE_OPTION ){
    		
    		guimodel.lastExportedBNet = outputBNetChooser.getSelectedFile();
    		
    		//Temporary:
    		String outputPath = outputBNetChooser.getSelectedFile().getAbsolutePath();
    		
    		
    		if( !outputPath.endsWith(".dne") ){
    			outputPath += ".dne";
    		}
    		try{
    			guimodel.outputFullResultsAllBNs( outputPath );
    		} catch( Exception e ){
    			JOptionPane.showMessageDialog( mainTabbedPane, "Error during network export.");
    			return;
    		}
    	}
    	//JOptionPane.showMessageDialog( mainTabbedPane, "Network export: Successful");
    	
    }
    
    //User clicks "View Selected Network" button -> Display BN for one of the 'Representative Networks'
    private void resultsViewSelectedNetworkBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	
    	//Determine if search run:
    	if( guimodel.metropolisSearch == null || !guimodel.metropolisSearch.isFinished() ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Cannot View Network: Search not complete.");
    		return;
    	}
    	if( guimodel.searchResults == null ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Cannot View Network: Full results not generated.");
    		return;
    	}
    	
    	//Find index of results generated:
    	int rowSelected = fullResultsTable.getSelectedRow();
    	if( rowSelected == -1 ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Cannot View Network: No network Selected.");
    		return;
    	}
    	
    	//Generate string of selected network:
    	String networkString;
    	try{
    		networkString = guimodel.generateNetworkStringFullResults( rowSelected );
    	} catch( Exception e ){
    		JOptionPane.showMessageDialog( mainTabbedPane, "Error occurred: Cannot view selected network.");
    		return;
    	}
    	
    	//Create viewer:
    	try{
        	//new BNetViewer( networkString, false );
    		String windowTitle = "Representative Network " + (rowSelected+1);
    		new BNetViewer( networkString, false, windowTitle );
        } catch( Exception e ){
        	JOptionPane.showMessageDialog( mainTabbedPane, e );
        }
    }
    
    
    
    
    
    
    //***********************************************************
    /*-------------------- Helper Methods ----------------------*/
    //***********************************************************
    
    //Helper: Enable/Disable buttons in the Expert Priors tab
    private void setExpertPriorsTabEnabled( boolean enabled ){
    	newExpertPriorsBtn.setEnabled( enabled );
    	loadExpertPriorsBtn.setEnabled( enabled );
    	saveExpertPriorsBtn.setEnabled( enabled );
    	expertPriorsTextArea.setEnabled( enabled );
    	validateExpertPriorsBtn.setEnabled( enabled );
    }
    
    
    
    /** Method to redirect console output to the required place.
     * Currently set up to redirect output to console output to
     * jTextField in the run tab
     * Other areas of CaMML output important information using System.out.println(...)
     *  hence this is necessary.
     * @param outputTextArea The text area to redirect console output to.
     */
    private void redirectOutputStream( final JTextArea outputTextArea ){
    	//Anonymous inner class for redirecting output stream to the specified text area:
    	OutputStream out = new OutputStream(){
    		@Override
    	    public void write(int b) throws IOException {
    	      outputTextArea.append(String.valueOf((char) b));
    	    }
    	 
    	    @Override
    	    public void write(byte[] b, int off, int len) throws IOException {
    	    	outputTextArea.append(new String(b, off, len));
    	    }
    	 
    	    @Override
    	    public void write(byte[] b) throws IOException {
    	      write(b, 0, b.length);
    	    }
    	};
    	
    	PrintStream PSOut = new PrintStream( out, true );
    	System.setOut( PSOut );
    	System.setErr( PSOut );
    }

    /* Get the options from the GUIAvailableParameters and populate the various
     *  combo boxes etc
     */
    private void populateSetupOptions(){
    	if( GUIAvailableParameters.MMLLearners.length != GUIAvailableParameters.MMLLearnerNames.length ){
    		System.out.println("Error in GUIAvailableParameters code (#Options != #names).");
    		throw new RuntimeException("Error in GUIAvailableParameters code (#Options != #names).");
    	}
    	
    	if( GUIAvailableParameters.RNGs.length != GUIAvailableParameters.RNGsString.length
    			|| GUIAvailableParameters.RNGs.length != GUIAvailableParameters.RNGUseSetSeed.length){
    		System.out.println("Error in GUIAvailableParameters code (#Options != #names).");
    		throw new RuntimeException("Error in GUIAvailableParameters code (#Options != #names).");
    	}
    	
    	
    	//Parameterize the available learners in the combo box:
    	MMLLearnerCombo.removeAllItems();
    	
    	for( String s : GUIAvailableParameters.MMLLearnerNames ){
    		MMLLearnerCombo.addItem(s);
    	}
    	
    	//Parameterize the available RNGs:
    	setupRNGCombo.removeAllItems();
    	for( String s : GUIAvailableParameters.RNGsString ){
    		setupRNGCombo.addItem(s);
    	}
    	//Enable/disable the textfield for the RNG seed if appropriate:
    	setupRNGSeed.setEnabled( GUIAvailableParameters.RNGUseSetSeed[0] );
    	setupRNGSeed2.setEnabled( GUIAvailableParameters.RNGUseSetSeed2[0] );
    	
    }
    
    /**Check the selected settings to ensure all values are OK before running.
     * Checks data, MMLLearner and Expert priors, etc.
     * Displays one error (as message dialog) if there is an invalid value for any of these.
     * @return True if search is OK to start. False otherwise.
     */
    private boolean checkSearchSettingsAndDisplayErrors(){
    	//Update status labels:
    	updateStatusBarLabelExpertPriors();
    	updateStatusBarLabelData();
    	
    	//Check data:
    	if( !guimodel.dataValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Data file not valid/selected.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	//Check MMLLearner: (note: this should always be OK...)
    	if( !guimodel.MMLLearnerValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Invalid parameterization type.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	//Check Search factor value:
    	if( !guimodel.searchFactorValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Invalid value for Search Factor in Setup.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	//Check max SECs value:
    	if( !guimodel.maxSECsValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Invalid value for Maximum Number of SECs in Setup.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	//Check max SECs value:
    	if( !guimodel.minTotalPosteriorValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Invalid value for Minimum Total Posterior in Setup.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	
    	if( !guimodel.expertPriorsValid() ){
    		JOptionPane.showMessageDialog(mainTabbedPane, "Expert priors invalid.","Error",JOptionPane.ERROR_MESSAGE);
    		return false;
    	}
    	
    	return true;
    }
    
    //Helper method for  the textboxes expecting numeric input
    //Return true if OK number (betwenn minValue and maxValue)
    private boolean validateNumericInputStringDouble( String s, double minValue, double maxValue ){
    	if( s == null ) return false;
    	
    	//Try to convert to numeric value:
    	double strVal;
    	try{
    		strVal = Double.parseDouble(s);
    	} catch( NumberFormatException e ){
    		return false;
    	}
    	
    	if( strVal < minValue || strVal > maxValue ) return false;
    	
    	return true;
    }
    
    //Helper method for  the textboxes expecting numeric input
    //Return true if OK number (betwenn minValue and maxValue)
    private boolean validateNumericInputStringInteger( String s, int minValue, int maxValue ){
    	if( s == null ) return false;
    	
    	//Try to convert to numeric value:
    	int strVal;
    	try{
    		strVal = Integer.parseInt(s);
    	} catch( NumberFormatException e ){
    		return false;
    	}
    	
    	if( strVal < minValue || strVal > maxValue ) return false;
    	
    	return true;
    }
    
    //Helper method for  the textboxes expecting numeric input
    //Return true if OK number (betwenn minValue and maxValue)
    private boolean validateNumericInputStringLong( String s, long minValue, long maxValue ){
    	if( s == null ) return false;
    	
    	//Try to convert to numeric value:
    	long strVal;
    	try{
    		strVal = Long.parseLong(s);
    	} catch( NumberFormatException e ){
    		return false;
    	}
    	
    	if( strVal < minValue || strVal > maxValue ) return false;
    	
    	return true;
    }
    
    /** Generates a JFrame for viewing the data in the selected file.
     */
    private void createDataViewer(){
    	if( guimodel.dataValid() ){
			JFrame frame = new DataViewer(guimodel.data);
			frame.setSize(800,600);
			frame.setTitle( "Data Viewer - " + guimodel.selectedFile.getName() );
			frame.setDefaultCloseOperation( JFrame.DISPOSE_ON_CLOSE );
			frame.setVisible(true);
    	}
    }
    
    //Update the status bar label for Data
    private void updateStatusBarLabelData(){
    	if( guimodel.data == null ){
    		statusBarLabelData.setText("Data: Not Loaded");
    		return;
    	}
    	if( !guimodel.dataValid() ){
    		statusBarLabelData.setText("Data: Not Valid");
    		return;
    	}
    	//By now: Data must be valid...
    	statusBarLabelData.setText("Data: Loaded, OK");
    }
    
    //Update the status bar label for Expert Priors
    private void updateStatusBarLabelExpertPriors(){
    	if( guimodel.useExpertPriors == false ){
    		statusBarLabelExpertPriors.setText( "Expert Priors: Not Set");
    	} else{
    		if( expertPriorsTextArea.getText().equals( guimodel.expertPriorsString ) ){
    			statusBarLabelExpertPriors.setText("Expert Priors: Set, Validated");
    		} else{
    			statusBarLabelExpertPriors.setText("Expert Priors: Set, Not Validated");
    		}
    	}
    }
    

    
    //=========================================================
    // ----- Variable Declaration: Generated by NetBeans -----
    private javax.swing.JComboBox MMLLearnerCombo;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JTextArea expertPriorsTextArea;
    private javax.swing.JButton exportNeticaBNBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JButton helpExpertPriorsBtn;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JLabel jLabelDataFileLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JButton loadDataFileBtn;
    private javax.swing.JButton loadExpertPriorsBtn;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JTextField maxSECsTextfield;
    private javax.swing.JTextField minTotalPosteriorTextField;
    private javax.swing.JButton newExpertPriorsBtn;
    private javax.swing.JPanel priorsPanel;
    private javax.swing.JButton resultsExportFullResults;
    private javax.swing.JButton resultsGenerateFullResultsBtn;
    private javax.swing.JLabel resultsLabelBestModel;
    private javax.swing.JLabel resultsLabelFullResults;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JButton resultsViewNetworkBtn;
    private javax.swing.JButton resultsViewSelectedNetworkBtn;
    private javax.swing.JButton runCammlRunBtn;
    private javax.swing.JButton runClearOutputBtn;
    private javax.swing.JTextArea runConsoleOutputTextArea;
    private javax.swing.JLabel runLabelConsoleOutput;
    private javax.swing.JPanel runPanel;
    private javax.swing.JButton saveExpertPriorsBtn;
    private javax.swing.JTextField searchFactorTextfield;
    private javax.swing.JPanel searchParametersPanel;
    private javax.swing.JScrollPane searchParametersScrollPane;
    private javax.swing.JCheckBox setupGenerateFullResultsCheckbox;
    private javax.swing.JLabel setupLabelAdvancedSettings;
    private javax.swing.JLabel setupLabelGenerateFullResults;
    private javax.swing.JLabel setupLabelMMLLearner;
    private javax.swing.JLabel setupLabelMaxSECs;
    private javax.swing.JLabel setupLabelMinTotalPosterior;
    private javax.swing.JLabel setupLabelParameterizationSettings;
    private javax.swing.JLabel setupLabelRNG;
    private javax.swing.JLabel setupLabelRNGSeed;
    private javax.swing.JLabel setupLabelSearchFactor;
    private javax.swing.JLabel setupLabelSearchSettings;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JComboBox setupRNGCombo;
    private javax.swing.JTextField setupRNGSeed;
    private javax.swing.JTextField setupRNGSeed2;
    private javax.swing.JLabel statusBarLabelData;
    private javax.swing.JLabel statusBarLabelExpertPriors;
    private javax.swing.JCheckBox useExpertPriorsCheckbox;
    private javax.swing.JButton validateExpertPriorsBtn;
    private javax.swing.JLabel versionLabel;
    private javax.swing.JButton viewDataBtn;
    //End of variable declaration - NetBeans autogenerated...
    
    //For loading data files, saving networks, loading expert priors:
    private JFileChooser dataFileChooser;
    private JFileChooser expertPriorsFileChooser;
    private JFileChooser outputBNetChooser;
    
    //Full results table:
    private JTable fullResultsTable;
}



